"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
// @ts-ignore
var blacklist_1 = __importDefault(require("blacklist"));
var styles_1 = __importDefault(require("./styles"));
var utils_1 = require("./utils");
var RangeSlider = /** @class */ (function (_super) {
    __extends(RangeSlider, _super);
    function RangeSlider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handle = null;
        _this.node = null;
        _this.offset = { x: 0, y: 0 };
        _this.start = { x: 0, y: 0 };
        _this.track = null;
        _this.getDragPosition = function (e) {
            var _a = utils_1.getCoordinates(e), x = _a.x, y = _a.y;
            return {
                x: x + _this.start.x - _this.offset.x,
                y: _this.offset.y + _this.start.y - y,
            };
        };
        _this.updateOptions = function (e) {
            var _a = _this, handle = _a.handle, track = _a.track;
            var _b = utils_1.getCoordinates(e), x = _b.x, y = _b.y;
            _this.start = {
                x: handle.offsetLeft,
                y: track.offsetHeight - handle.offsetTop - handle.offsetHeight,
            };
            _this.offset = { x: x, y: y };
        };
        _this.updatePosition = function (position) {
            var onChange = _this.props.onChange;
            var rect;
            if (_this.node) {
                rect = _this.node.getBoundingClientRect();
            }
            /* istanbul ignore else */
            if (onChange) {
                onChange(utils_1.getValues(position, _this.props, rect || {}), _this.props);
            }
        };
        _this.handleClickTrack = function (e) {
            var element = e.currentTarget;
            var _a = utils_1.getCoordinates(e), x = _a.x, y = _a.y;
            var _b = element.getBoundingClientRect(), left = _b.left, bottom = _b.bottom;
            _this.updatePosition({
                x: x - left,
                y: bottom - y,
            });
        };
        _this.handleDrag = function (e) {
            e.preventDefault();
            _this.updatePosition(_this.getDragPosition(e));
        };
        _this.handleDragEnd = function (e) {
            e.preventDefault();
            var onDragEnd = _this.props.onDragEnd;
            var rect;
            if (_this.node) {
                rect = _this.node.getBoundingClientRect();
            }
            document.removeEventListener('mousemove', _this.handleDrag);
            document.removeEventListener('mouseup', _this.handleDragEnd);
            document.removeEventListener('touchmove', _this.handleDrag);
            document.removeEventListener('touchend', _this.handleDragEnd);
            document.removeEventListener('touchcancel', _this.handleDragEnd);
            /* istanbul ignore else */
            if (onDragEnd) {
                onDragEnd(utils_1.getValues(_this.getDragPosition(e), _this.props, rect || {}), _this.props);
            }
        };
        _this.handleMouseDown = function (e) {
            e.preventDefault();
            _this.updateOptions(e);
            document.addEventListener('mousemove', _this.handleDrag);
            document.addEventListener('mouseup', _this.handleDragEnd);
        };
        _this.handleTouchStart = function (e) {
            e.preventDefault();
            _this.updateOptions(e);
            document.addEventListener('touchmove', _this.handleDrag, { passive: false });
            document.addEventListener('touchend', _this.handleDragEnd);
            document.addEventListener('touchcancel', _this.handleDragEnd);
        };
        return _this;
    }
    Object.defineProperty(RangeSlider.prototype, "position", {
        get: function () {
            var _a = this.props, axis = _a.axis, x = _a.x, xMax = _a.xMax, xMin = _a.xMin, y = _a.y, yMax = _a.yMax, yMin = _a.yMin;
            var bottom = ((y - yMin) / (yMax - yMin)) * 100;
            var left = ((x - xMin) / (xMax - xMin)) * 100;
            if (bottom > 100) {
                bottom = 100;
            }
            if (bottom < 0) {
                bottom = 0;
            }
            // bottom shouldn't be set with X axis
            /* istanbul ignore else */
            if (axis === 'x') {
                bottom = 0;
            }
            if (left > 100) {
                left = 100;
            }
            if (left < 0) {
                left = 0;
            }
            // left shouldn't be set with Y axis
            /* istanbul ignore else */
            if (axis === 'y') {
                left = 0;
            }
            return { x: left, y: bottom };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeSlider.prototype, "styles", {
        get: function () {
            var styles = this.props.styles;
            return styles_1.default(styles);
        },
        enumerable: true,
        configurable: true
    });
    RangeSlider.prototype.render = function () {
        var _this = this;
        var _a = this.props, axis = _a.axis, classNamePrefix = _a.classNamePrefix;
        var rest = blacklist_1.default(this.props, 'axis', 'classNamePrefix', 'onChange', 'onDragEnd', 'styles', 'x', 'xMax', 'xMin', 'xStep', 'y', 'yMax', 'yMin', 'yStep');
        var _b = this.position, x = _b.x, y = _b.y;
        var position = { left: x + "%", bottom: y + "%" };
        var size = {};
        var slider;
        var range;
        var track;
        var handle;
        /* istanbul ignore else */
        if (axis === 'x') {
            size.width = x + "%";
            slider = this.styles.sliderX;
            range = this.styles.rangeX;
            track = this.styles.trackX;
            handle = this.styles.handleX;
        }
        /* istanbul ignore else */
        if (axis === 'y') {
            size.height = y + "%";
            slider = this.styles.sliderY;
            range = this.styles.rangeY;
            track = this.styles.trackY;
            handle = this.styles.handleY;
        }
        /* istanbul ignore else */
        if (axis === 'xy') {
            size.height = y + "%";
            size.width = x + "%";
            slider = this.styles.sliderXY;
            range = this.styles.rangeXY;
            track = this.styles.trackXY;
            handle = this.styles.handleXY;
        }
        return (react_1.default.createElement("div", __assign({ ref: function (c) { return (_this.node = c); }, style: slider }, rest, { className: classNamePrefix }),
            react_1.default.createElement("div", { className: classNamePrefix && classNamePrefix + "__track", ref: function (c) { return (_this.track = c); }, style: track, 
                // @ts-ignore
                onClick: this.handleClickTrack },
                react_1.default.createElement("div", { className: classNamePrefix && classNamePrefix + "__range", style: __assign({}, size, range) }),
                react_1.default.createElement("div", { ref: function (c) { return (_this.handle = c); }, style: __assign({}, this.styles.handleWrapper, position), 
                    // @ts-ignore
                    onTouchStart: this.handleTouchStart, 
                    // @ts-ignore
                    onMouseDown: this.handleMouseDown },
                    react_1.default.createElement("span", { className: classNamePrefix && classNamePrefix + "__handle", style: handle })))));
    };
    RangeSlider.defaultProps = {
        axis: 'x',
        x: 0,
        xMax: 100,
        xMin: 0,
        xStep: 1,
        y: 0,
        yMax: 100,
        yMin: 0,
        yStep: 1,
    };
    return RangeSlider;
}(react_1.Component));
exports.default = RangeSlider;
