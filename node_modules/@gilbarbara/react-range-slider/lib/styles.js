"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var deepmerge_1 = __importDefault(require("deepmerge"));
var defaultOptions = {
    handleBorder: '2px solid #000',
    handleBorderRadius: '4px',
    handleBorderRadiusXY: '50%',
    handleColor: '#fff',
    handleSize: '10px',
    handleSizeXY: '20px',
    handleSpace: '6px',
    height: '20px',
    padding: '6px',
    rangeColor: '#007bff',
    trackBorderRadius: '3px',
    trackColor: '#ccc',
    width: '20px',
};
function num(value) {
    if (typeof value === 'number') {
        return value;
    }
    return parseInt(value, 10);
}
function getStyles(styles) {
    var options = deepmerge_1.default(defaultOptions, styles ? styles.options : {});
    var slider = {
        boxSizing: 'border-box',
        display: 'inline-block',
        padding: options.padding,
        transition: 'height 0.4s, width 0.4s',
    };
    var track = {
        backgroundColor: options.trackColor,
        borderRadius: options.trackBorderRadius,
        boxSizing: 'border-box',
        height: '100%',
        position: 'relative',
        width: '100%',
    };
    var range = {
        backgroundColor: options.rangeColor,
        borderRadius: options.trackBorderRadius,
        position: 'absolute',
    };
    var handleWrapper = {
        boxSizing: 'border-box',
        height: options.height,
        position: 'absolute',
        transition: 'height 0.4s, width 0.4s',
        width: options.width,
    };
    var handle = {
        backgroundColor: options.handleColor,
        border: options.handleBorder,
        borderRadius: options.handleBorderRadius,
        boxSizing: 'border-box',
        display: 'block',
        position: 'absolute',
        transition: 'height 0.4s, width 0.4s',
    };
    var defaultStyles = {
        handleWrapper: handleWrapper,
        handleX: __assign({}, handle, { height: num(options.height) + num(options.handleSpace), left: -(num(options.handleSize) / 2), top: -(num(options.handleSpace) / 2), width: options.handleSize }),
        handleXY: __assign({}, handle, { backgroundColor: 'transparent', border: options.handleBorder, borderRadius: options.handleBorderRadiusXY, bottom: -(num(options.handleSizeXY) / 2), height: options.handleSizeXY, left: -(num(options.handleSizeXY) / 2), position: 'absolute', width: options.handleSizeXY }),
        handleY: __assign({}, handle, { bottom: -(num(options.handleSize) / 2), height: options.handleSize, left: -(num(options.handleSpace) / 2), width: num(options.width) + num(options.handleSpace) }),
        rangeX: __assign({}, range, { height: '100%', top: 0 }),
        rangeXY: __assign({}, range, { bottom: 0 }),
        rangeY: __assign({}, range, { bottom: 0, left: 0, width: '100%' }),
        sliderX: __assign({}, slider, { height: num(options.height) + num(options.padding) * 2, width: '100%' }),
        sliderXY: __assign({}, slider, { height: '100%', width: '100%' }),
        sliderY: __assign({}, slider, { height: '100%', width: num(options.width) + num(options.padding) * 2 }),
        trackX: __assign({}, track, { height: options.height }),
        trackXY: __assign({}, track, { height: '100%', minHeight: '50px', width: '100%' }),
        trackY: __assign({}, track, { height: '100%', minHeight: '50px', width: options.width }),
    };
    return deepmerge_1.default(defaultStyles, styles || {});
}
exports.default = getStyles;
